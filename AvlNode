package oop.ex4.data_structures;

public class AvlNode implements oop.ex4.data_structures.TreeNode {

    private static final int LEFT_SUB_HEIGHT = 0;
    private static final int RIGHT_SUB_HEIGHT = 1;
    private static final int INITIAL_HEIGHT = 0;

    private int data;
    private int height;
    private AvlNode parent;
    public AvlNode rightChild;
    public AvlNode leftChild;

    /**
     * A constructor for the AvlNode class. This constructor should only be used for the root.
     * @param setData the value to be set as the root's data.
     */
    public AvlNode(int setData){
        data = setData;
        parent = null;
        rightChild = null;
        leftChild = null;
        height = INITIAL_HEIGHT;
    }

    /**
     * A constructor for the AvlNode class. This constructor should be used for the nodes other than the root.
     * @param setData the value to be set as the node's data.
     * @param setParent the node that is this node's parent.
     */
    public AvlNode(int setData, AvlNode setParent){
        data = setData;
        parent = setParent;
        rightChild = null;
        leftChild = null;
        height = INITIAL_HEIGHT;
    }

    public void setChild(TreeNode newChild){
        if (newChild != null){
            if (newChild.getData() > this.data){
                rightChild = (AvlNode) newChild;
                rightChild.setParent(this);
            }
            else if (newChild.getData() < this.data){
                leftChild = (AvlNode) newChild;
                leftChild.setParent(this);
            }
        }
    }

//    @Override
//    public void setRightChild(TreeNode newRightChild){
//        if (newRightChild != null) {
//            rightChild = (AvlNode) newRightChild;
//            rightChild.setParent(this);
//        }
//    }
//
//    @Override
//    public void setLeftChild(TreeNode newLeftChild){
//        if (newLeftChild != null) {
//            leftChild = (AvlNode) newLeftChild;
//            leftChild.setParent(this);
//        }
//    }

    @Override
    public void setParent(TreeNode newParent){
        parent = (AvlNode) newParent;
    }

    @Override
    public AvlNode getParent() {
        return parent;
    }

    @Override
    public AvlNode getRightChild(){
        return rightChild;
    }

    @Override
    public AvlNode getLeftChild(){
        return leftChild;
    }

    @Override
    public void setData(int newData){
        data = newData;
    }

    @Override
    public int getData(){
        return data;
    }

    @Override
    public int getHeight(){
        return height;
    }

    public int findNodeBalance(){
        boolean print = (data == 0);
        int leftHeight = 0;
        int rightHeight = 0;

        if (leftChild != null){
            leftHeight = leftChild.getHeight() + 1;
        }
        if (rightChild != null){
            rightHeight = rightChild.getHeight() + 1;
        }
        if(print) System.out.println("ROOT LEFT HEIGHT:" + leftHeight + "ROOT RIGHT HEIGHT:" + rightHeight);

        return (leftHeight - rightHeight);
    }

    public void setNodeHeight(){
        boolean printzero = (data == 0);
        int leftHeight = -1;
        int rightHeight = -1;

        if (leftChild != null){
            leftHeight = leftChild.getHeight() + 1;
        }
        if (rightChild != null){
            rightHeight = rightChild.getHeight() + 1;
        }
        if(printzero)
            System.out.println(leftHeight + " ZEROLEFT " + rightHeight + " ZERORIGHT");
        height = Math.max(leftHeight, rightHeight) + 1;
    }

    public void increaseHeight(){
        height++;
    }

    public void decreaseHeight(){
        height--;
    }


}
