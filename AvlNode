/**
 * This class is a tree node specifically for an AVL Tree.
 */
package oop.ex4.data_structures;

public class AvlNode implements oop.ex4.data_structures.TreeNode {

    private int data;
    private int height;
    private AvlNode parent;
    private AvlNode rightChild;
    private AvlNode leftChild;

    /**
     * A constructor for the AvlNode class. This constructor should only be used for the root.
     * @param setData the value to be set as the root's data.
     */
    public AvlNode(int setData){
        data = setData;
        parent = null;
        height = 0;
    }

    @Override
    public void setRightChild(TreeNode newRightChild){
        if (newRightChild != null) {
            rightChild = (AvlNode) newRightChild;
            rightChild.setParent(this);
        } else rightChild = null;
    }

    @Override
    public void setLeftChild(TreeNode newLeftChild){
        if (newLeftChild != null) {
            leftChild = (AvlNode) newLeftChild;
            leftChild.setParent(this);
        } else leftChild = null;
    }

    @Override
    public void setParent(TreeNode newParent){
        parent = (AvlNode) newParent;
    }

    @Override
    public AvlNode getParent() {
        return parent;
    }

    @Override
    public AvlNode getRightChild(){
        return rightChild;
    }

    @Override
    public AvlNode getLeftChild(){
        return leftChild;
    }

    @Override
    public void setData(int newData){
        data = newData;
    }

    @Override
    public int getData(){
        return data;
    }

    @Override
    public int getHeight(){
        return height;
    }

    @Override
    public void setHeight(){
        // Initialize height as if node is leaf.
        int leftHeight = -1;
        int rightHeight = -1;

        if (leftChild != null) leftHeight = leftChild.getHeight();
        if (rightChild != null) rightHeight = rightChild.getHeight();

        height = Math.max(leftHeight, rightHeight) + 1;
    }

}
