package oop.ex4.data_structures;

public class AvlNode implements oop.ex4.data_structures.TreeNode {

    static final int LEFT_SUB_HEIGHT = 0;
    static final int RIGHT_SUB_HEIGHT = 1;

    private int data;
    private AvlNode parent;
    private AvlNode rightChild;
    private AvlNode leftChild;

    /**
     * A constructor for the AvlNode class. This constructor should only be used for the root
     */
    public AvlNode(int setData){
        data = setData;
        parent = null;
        rightChild = null;
        leftChild = null;
    }

    public AvlNode(int setData, AvlNode setParent){
        data = setData;
        parent = setParent;
        rightChild = null;
        leftChild = null;
    }

    public void setRightChild(AvlNode newRightChild){
        if (newRightChild != null) {
            rightChild = newRightChild;
            rightChild.setParent(this);
        }
    }

    public void setLeftChild(AvlNode newLeftChild){
        if (newLeftChild != null) {
            leftChild = newLeftChild;
            leftChild.setParent(this);
        }
    }

    public void setParent(AvlNode newParent){
        parent = newParent;
    }

    public AvlNode getParent() {
        return parent;
    }

    public AvlNode getRightChild(){
        return rightChild;
    }

    public AvlNode getLeftChild(){
        return leftChild;
    }

    public void setData(int newData){
        data = newData;
    }

    public int getData(){
        return data;
    }

    public int findNodeBalance(){
        int[] subHeights = findSubHeights();
        return (subHeights[LEFT_SUB_HEIGHT] - subHeights[RIGHT_SUB_HEIGHT]);
    }

    public int getNodeHeight(){
        int[] subHeights = findSubHeights();
        return Math.max(subHeights[LEFT_SUB_HEIGHT], subHeights[RIGHT_SUB_HEIGHT]);
    }

    public int[] findSubHeights(){
        int[] subHeightArr = new int[2];
        if(leftChild != null){
            subHeightArr[LEFT_SUB_HEIGHT] = leftChild.getNodeHeight() + 1;
        }
        if(rightChild != null) {
            subHeightArr[RIGHT_SUB_HEIGHT] = rightChild.getNodeHeight() + 1;
        }
        return subHeightArr;
    }


}
