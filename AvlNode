package oop.ex4.data_structures;

public class AvlNode extends oop.ex4.data_structures.TreeNode {

    private static final int LEFT_SUBHEIGHT = 0;
    private static final int RIGHT_SUBHEIGHT = 1;

    private int balance;

    private AvlNode parent;
    private AvlNode rightChild;
    private AvlNode leftChild;

    /**
     * A default constructor for the AvlNode class
     */
    public AvlNode(){

    }


    public int getNodeHeight(){
        int[] subHeights = findSubHeights();
        return Math.max(subHeights[LEFT_SUBHEIGHT], subHeights[RIGHT_SUBHEIGHT]);
    }

    public void setNodeHeight(int heightChange){
        nodeHeight += heightChange;
    }


    public void setRightChild(AvlNode newRightChild){
        rightChild = newRightChild;
        rightChild.setParent(this);
    }

    public void setLeftChild(AvlNode newLeftChild){
        leftChild = newLeftChild;
        leftChild.setParent(this);
    }

    public AvlNode getParent() {
        return parent;
    }

    public AvlNode getRightChild(){
        return rightChild;
    }

    public AvlNode getLeftChild(){
        return leftChild;
    }

    public int findNodeBalance(){
        int[] subHeights = findSubHeights();
        return (subHeights[LEFT_SUBHEIGHT] - subHeights[RIGHT_SUBHEIGHT]);
    }

    private int[] findSubHeights(){
        int[] subHeightArr = new int[2];
        if(leftChild != null){
            subHeightArr[LEFT_SUBHEIGHT] = leftChild.getNodeHeight() + 1;
        }
        if(rightChild != null) {
            subHeightArr[RIGHT_SUBHEIGHT] = rightChild.getNodeHeight() + 1;
        }
        return subHeightArr;
    }
}
