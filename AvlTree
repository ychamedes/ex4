public class AvlTree extends BinarySearchTree {

    private final static int NEGATIVE_CONTAINS_RESULT = -1;

    protected AvlNode root;

    /**
     * The default constructor for the AvlTree class
     */
    public AvlTree(){

    }

    /**
     * A constructor that takes an array of integers and initializes a new AvlTree containing the elements in
     * the array
     * @param data An array of integers to be added to the AVL Tree
     */
    public AvlTree(int[] data){
        if(data != null) {
            for (int newValue : data) {
                add(newValue);
            }
        }
    }

    /**
     * A constructor that takes an existing AvlTree and creates a deep copy in a new AvlTree
     * @param tree the AvlTree to be deep-copied
     */
    public AvlTree(AvlTree tree){

    }

    /**
     * Take an integer and add it to the Avl tree
     * @param newValue the integer value to be added
     * @return True if the value was added successfully, false otherwise
     */
    public boolean add(int newValue){
        if(contains(newValue) != NEGATIVE_CONTAINS_RESULT) {
            AvlNode addedNode = addNode(root, newValue);
            rebalanceNode(addedNode, newValue);
            return true;
        }
        else{
            return false;
        }
    }

    private AvlNode addNode(AvlNode node, int addValue){
        if(node == null){
            node = new AvlNode();
            node.setData(addValue);
            return node;
        }
        else if(node.getData() > addValue){
            return(addNode(node.getRightChild(), addValue));
        }
        else{
            return(addNode(node.getLeftChild(), addValue));
        }
    }

    private void rebalanceNode(AvlNode node, int addValue){
        int balance = node.findNodeBalance();
        if(balance > 1){
            if(addValue < node.getLeftChild().getData()){
                rotateLeft(node);
            }
            else if(addValue > node.getLeftChild().getData()){
                rotateLR(node);
            }
        }
        else if(balance < -1){
            if(addValue < node.getRightChild().getData()){
                rotateRight(node);
            }
            else if(addValue > node.getRightChild().getData()){
                rotateRL(node);
            }
        }
        if(node.getParent() != null){
            rebalanceNode(node.getParent(), addValue);
        }
    }

    /**
     * Take an integer and attempt to delete it from the Avl tree
     * @param toDelete the value to be deleted
     * @return True if the value is found and deleted successfuly, false otherwise.
     */
    public boolean delete(int toDelete){
        return true;
    }

    /**
     * Take an integer representing the height of an AvlTree and return the minimum number of nodes
     * possible in an AvlTree of that height.
     * @param h the height of an AvlTree
     * @return the minimum size of an AvlTree
     */
    public static int findMinNodes(int h){
        //Since the minimum size of the avl tree can be expressed as a recursive function, we can use the
        // fibonacci series to find it for height h, using (1 + sqrt(5)/2) as an approximation of the
        // golden ratio
        return (int)((((Math.pow(((1 + Math.sqrt(5))/2) , (h + 3))) - (Math.pow(((1 - Math.sqrt(5))/2),(h +
                3))))/ (Math.sqrt(5))) -1);
    }

    /**
     * Take an integer representing the height of an AvlTree and return the maximum number of nodes
     * possible in an AvlTree of that height
     * @param h the height of an AvlTree
     * @return the maximum size of an AvlTree
     */
    public static int findMaxNodes(int h){
        return (int)Math.pow(2, h+1) - 1;
    }

    /**
     *
     * @param args
     */

    private void rotateLeft(AvlNode root){
        //Set new references
        AvlNode newRoot = root.getLeftChild();
        AvlNode newRightChildOfRoot = newRoot.getRightChild();

        //Rotate root
        newRoot.setRightChild(root);
        root.setLeftChild(newRightChildOfRoot);

        //Adjust heights
        newRoot.setNodeHeight(-1);
        root.setNodeHeight(1);
    }

    private void rotateLR(AvlNode root){
        rotateLeft(root.getLeftChild());
        rotateRight(root);
    }

    private void rotateRight(AvlNode root){
        //Set new references
        AvlNode newRoot = root.getRightChild();
        AvlNode newLeftChildOfRoot = newRoot.getLeftChild();

        //Rotate root
        newRoot.setLeftChild(root);
        root.setRightChild(newLeftChildOfRoot);

        //Adjust heights
        newRoot.setNodeHeight(-1);
        root.setNodeHeight(1);

    }

    private void rotateRL(AvlNode root){
        rotateRight(root.getRightChild());
        rotateLeft(root);
    }

    public static void main(java.lang.String[] args){

    }

}
