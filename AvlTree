package oop.ex4.data_structures;

import java.util.Iterator;

public class AvlTree extends BinarySearchTree {

    AvlNode root;

    /**
     * The default constructor for the AvlTree class
     */
    public AvlTree(){
        root = null;
    }

    /**
     * A constructor that takes an array of integers and initializes a new AvlTree containing the elements in
     * the array
     * @param data An array of integers to be added to the AVL Tree
     */
    public AvlTree(int[] data){
        if(data != null) {
            for (int newValue : data) {
                add(newValue);
            }
        } else root = null; // No data. Create an empty tree.
    }

    /**
     * A constructor that takes an existing AvlTree and creates a deep copy in a new AvlTree
     * @param tree the AvlTree to be deep-copied
     */
    public AvlTree(AvlTree tree){
        if(tree != null) {
            Iterator<Integer> treeIter = tree.iterator();
            AvlTree copyTree = new AvlTree();
            while(treeIter.hasNext()){
                copyTree.add(treeIter.next());
            }
        } else root = null; // No tree to copy. Create an empty tree.
    }

    /**
     *
     * @param node
     * @return
     */
    int getBalance(AvlNode node) {
        if (node == null) return 0;

        int leftHeight = 0;
        int rightHeight = 0;

        if (node.getLeftChild() != null) leftHeight = node.getLeftChild().getHeight();
        if (node.getRightChild() != null) rightHeight = node.getRightChild().getHeight();

        return leftHeight - rightHeight;
    }

    @Override
    public TreeNode getRoot(){
        return this.root;
    }

    /**
     * Rotate the node "up" to have its parent as its left subtree.
     * @param rotateRoot the node being rotated
     * @return the node which is now the root of the new subtree.
     */
    private AvlNode rotateLeft(AvlNode rotateRoot){
        AvlNode newRoot = rotateRoot.getRightChild();
        AvlNode newLeftRightChild = newRoot.getLeftChild();

        // Perform rotation
        // Put the rotated root on the new root's left.
        newRoot.setLeftChild(rotateRoot);
        // Turn new root's left subtree into the rotated root's right subtree.
        rotateRoot.setRightChild(newLeftRightChild);

        //  Update heights
        rotateRoot.setHeight();
        newRoot.setHeight();

        return newRoot;

    }

    /**
     * Rotate the node "up" to have its parent as its right subtree.
     * @param rotateRoot the node being rotated
     * @return the node which is now the root of the new subtree.
     */
    private AvlNode rotateRight(AvlNode rotateRoot){
        AvlNode newRoot = rotateRoot.getLeftChild();
        AvlNode newRightLeftChild = newRoot.getRightChild();

        // Perform rotation
        // Put the rotated root on the new root's right.
        newRoot.setRightChild(rotateRoot);
        // Turn new root's right subtree into the rotated root's left subtree.
        rotateRoot.setLeftChild(newRightLeftChild);

        // Update heights
        rotateRoot.setHeight();
        newRoot.setHeight();

        return newRoot;
    }

    /**
     * Take an integer and add it to the Avl tree
     * @param newValue the integer value to be added
     * @return True if the value was added successfully, false otherwise
     */
    public boolean add(int newValue) {
        if (contains(newValue) == NEGATIVE_CONTAINS_RESULT) {
            root = addNode(root, newValue);
            return true;
        }
        else return false;
    }

    private AvlNode addNode(AvlNode node, int addValue){
        // Standard BST insertion
        if (node == null)
            return (new AvlNode(addValue));

        // Data to be added is smaller --> go to left subtree
        if (addValue < node.getData()) node.setLeftChild(addNode(node.getLeftChild(), addValue));
        // Data to be added is greater --> go to right subtree
        else if (addValue > node.getData()) node.setRightChild(addNode(node.getRightChild(), addValue));
        // Data is the same and duplicate keys not allowed
        else return node;

        // Update height of the current node
        node.setHeight();

        // Get the balance of the node and check if it is now unbalanced.
        int balance = getBalance(node);

        if (balance > 1){
            // Left Left Case
            if (addValue < node.getLeftChild().getData()) return rotateRight(node);
            // Left Right Case
            if (addValue > node.getLeftChild().getData()) {
                node.setLeftChild(rotateLeft(node.getLeftChild()));
                return rotateRight(node);
            }
        } else if (balance < -1){
            // Right Right Case
            if (addValue > node.getRightChild().getData()) return rotateLeft(node);
            // Right Left Case
            if (addValue < node.getRightChild().getData()) {
                node.setRightChild(rotateRight(node.getRightChild()));
                return rotateLeft(node);
            }
        }
        return node; // Balance is fine and the node is unchanged.
    }

    /**
     * Take an integer and attempt to delete it from the Avl tree
     * @param toDelete the value to be deleted
     * @return True if the value is found and deleted successfully, false otherwise.
     */
    public boolean delete(int toDelete){
        if (contains(toDelete) != NEGATIVE_CONTAINS_RESULT) {
            root = deleteNode(root, toDelete);
            return true;
        }
        else return false;
    }

    private AvlNode deleteNode(AvlNode node, int toDelete){
        // Standard BST deletion
        if (node == null) return node;

        // Data to be deleted is smaller --> go to left subtree
        if (toDelete < node.getData()) node.setLeftChild(deleteNode(node.getLeftChild(), toDelete));
        // Data to be deleted is greater --> go to right subtree
        else if (toDelete > node.getData())node.setRightChild(deleteNode(node.getRightChild(), toDelete));
        // Data to be deleted is at the node, so it should be deleted.
        else {
            // Node has only one child or no children
            if ((node.getLeftChild() == null) || (node.getRightChild() == null)) {
                AvlNode temp = null;
                if (temp == node.getLeftChild()) temp = node.getRightChild();
                else temp = node.getLeftChild();

                // No children case
                if (temp == null) {
                    temp = node;
                    node = null;
                } else node = temp;  // One child case
            } else {
                // Node has two children
                // Get the inorder successor (smallest in the right subtree)
                AvlNode temp = (AvlNode) treeMinimum(node.getRightChild());

                // Copy the inorder successor's data to this node
                node.setData(temp.getData());
                // Delete the inorder successor
                node.setRightChild(deleteNode(node.getRightChild(), temp.getData()));
            }
        }

        // If the tree had only one node then return
        if (node == null) return node;

        // Update height of the current node
        node.setHeight();

        // Get the balance of the node and check if it is now unbalanced.
        int balance = getBalance(node);

        if (balance > 1){
            // Left Left Case
            if (getBalance(node.getLeftChild()) >= 0) return rotateRight(node);
            // Left Right Case
            if (getBalance(node.getLeftChild()) < 0) {
                node.setLeftChild(rotateLeft(node.getLeftChild()));
                return rotateRight(node);
            }
        } else if (balance < -1){
            // Right Right Case
            if (getBalance(node.getRightChild()) <= 0) return rotateLeft(node);
            // Right Left Case
            if (balance < -1 && getBalance(node.getRightChild()) > 0) {
                node.setRightChild(rotateRight(node.getRightChild()));
                return rotateLeft(node);
            }
        }
        return node;
    }


    /**
     * Take an integer representing the height of an AvlTree and return the minimum number of nodes
     * possible in an AvlTree of that height.
     * @param h the height of an AvlTree
     * @return the minimum size of an AvlTree
     */
    public static int findMinNodes(int h){
        //Since the minimum size of the avl tree can be expressed as a recursive function, we can use the
        // fibonacci series to find it for height h, using (1 + sqrt(5)/2) as an approximation of the
        // golden ratio
        return (int)((((Math.pow(((1 + Math.sqrt(5))/2) , (h + 3))) - (Math.pow(((1 - Math.sqrt(5))/2),(h +
                3))))/ (Math.sqrt(5))) -1);
    }

    /**
     * Take an integer representing the height of an AvlTree and return the maximum number of nodes
     * possible in an AvlTree of that height
     * @param h the height of an AvlTree
     * @return the maximum size of an AvlTree
     */
    public static int findMaxNodes(int h){
        return (int)Math.pow(2, h+1) - 1;
    }

    // A utility function to print preorder traversal
    // of the tree.
    // The function also prints height of every node
    void preOrder(AvlNode node) {
        if (node != null) {
            System.out.print(node.getData() + " ");
            preOrder(node.getLeftChild());
            preOrder(node.getRightChild());
        }
    }

    public void printNode(AvlNode node){
        System.out.println(node.getData());
    }

    public void printTree(AvlNode node){
        if(node.getRightChild() != null)
            printTree(true,"", node.getRightChild());
        printNode(node);
        if(node.getLeftChild() != null)
            printTree(false,"", node.getLeftChild());
    }

    public void printTree(boolean isRight, String indent, AvlNode node){
        AvlNode rightNode = null;
        if(node.getRightChild() != null)
            rightNode = node.getRightChild();
        if (rightNode != null) {
            printTree(true, indent + (isRight ? "        " : " |      "), rightNode);
        }
        System.out.print(indent);
        if (isRight) System.out.print(" /");
        else System.out.print(" \\");
        System.out.print("----- ");
        printNode(node);
        AvlNode leftNode = node.getLeftChild();
        if (leftNode != null) {
            printTree(false, indent + (isRight ? " |      " : "        "), leftNode);
        }
    }

    public static void main(String[] args){
        AvlTree tree = new AvlTree();

        /* Constructing tree given in the above figure */
        tree.root = tree.addNode(tree.root, 0);
        tree.root = tree.addNode(tree.root, 29);
        tree.root = tree.addNode(tree.root, 28);
        tree.root = tree.addNode(tree.root, 27);
        tree.root = tree.addNode(tree.root, 26);
        tree.root = tree.addNode(tree.root, 25);
        tree.root = tree.addNode(tree.root, 24);
        tree.root = tree.addNode(tree.root, 23);
        tree.root = tree.addNode(tree.root, 22);
        tree.root = tree.addNode(tree.root, 21);

        /* The constructed AVL Tree would be
           9
          /  \
         1    10
        /  \    \
        0    5    11
        /    /  \
        -1   2    6
         */
        System.out.println("Preorder traversal of "+
                "constructed tree is : ");
        tree.preOrder(tree.root);

        tree.root = tree.deleteNode(tree.root, 10);

        /* The AVL Tree after deletion of 10
           1
          /  \
         0    9
        /     / \
        -1    5   11
        /  \
        2    6
//         */
//        System.out.println("");
//        System.out.println("Preorder traversal after "+
//                "deletion of 10 :");
//        tree.preOrder(tree.root);
    }

}
